// NOTICE
// This file was automatically generated by ../../generators/models.go. Do not edit it!
// You can regenerate it by running 'go generate ./models' from the directory above.

package model113

import (
	"github.com/crabmusket/gosunspec"
	"github.com/crabmusket/gosunspec/smdx"
	"github.com/crabmusket/gosunspec/typelabel"
)

// Block113 - Inverter (Three Phase) FLOAT - Include this model for three phase inverter monitoring using float values

const (
	ModelID          = 113
	ModelLabel       = "Inverter (Three Phase) FLOAT"
	ModelDescription = "Include this model for three phase inverter monitoring using float values"
)

const (
	A       = "A"
	AphA    = "AphA"
	AphB    = "AphB"
	AphC    = "AphC"
	DCA     = "DCA"
	DCV     = "DCV"
	DCW     = "DCW"
	Evt1    = "Evt1"
	Evt2    = "Evt2"
	EvtVnd1 = "EvtVnd1"
	EvtVnd2 = "EvtVnd2"
	EvtVnd3 = "EvtVnd3"
	EvtVnd4 = "EvtVnd4"
	Hz      = "Hz"
	PF      = "PF"
	PPVphAB = "PPVphAB"
	PPVphBC = "PPVphBC"
	PPVphCA = "PPVphCA"
	PhVphA  = "PhVphA"
	PhVphB  = "PhVphB"
	PhVphC  = "PhVphC"
	St      = "St"
	StVnd   = "StVnd"
	TmpCab  = "TmpCab"
	TmpOt   = "TmpOt"
	TmpSnk  = "TmpSnk"
	TmpTrns = "TmpTrns"
	VA      = "VA"
	VAr     = "VAr"
	W       = "W"
	WH      = "WH"
)

type Block113 struct {
	A       float32            `sunspec:"offset=0"`
	AphA    float32            `sunspec:"offset=2"`
	AphB    float32            `sunspec:"offset=4"`
	AphC    float32            `sunspec:"offset=6"`
	PPVphAB float32            `sunspec:"offset=8"`
	PPVphBC float32            `sunspec:"offset=10"`
	PPVphCA float32            `sunspec:"offset=12"`
	PhVphA  float32            `sunspec:"offset=14"`
	PhVphB  float32            `sunspec:"offset=16"`
	PhVphC  float32            `sunspec:"offset=18"`
	W       float32            `sunspec:"offset=20"`
	Hz      float32            `sunspec:"offset=22"`
	VA      float32            `sunspec:"offset=24"`
	VAr     float32            `sunspec:"offset=26"`
	PF      float32            `sunspec:"offset=28"`
	WH      float32            `sunspec:"offset=30"`
	DCA     float32            `sunspec:"offset=32"`
	DCV     float32            `sunspec:"offset=34"`
	DCW     float32            `sunspec:"offset=36"`
	TmpCab  float32            `sunspec:"offset=38"`
	TmpSnk  float32            `sunspec:"offset=40"`
	TmpTrns float32            `sunspec:"offset=42"`
	TmpOt   float32            `sunspec:"offset=44"`
	St      sunspec.Enum16     `sunspec:"offset=46"`
	StVnd   sunspec.Enum16     `sunspec:"offset=47"`
	Evt1    sunspec.Bitfield32 `sunspec:"offset=48"`
	Evt2    sunspec.Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 sunspec.Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 sunspec.Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 sunspec.Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 sunspec.Bitfield32 `sunspec:"offset=58"`
}

func (self *Block113) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "inverter",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: A, Offset: 0, Type: typelabel.Float32, Units: "A", Mandatory: true, Label: "Amps", Description: "AC Current"},
					smdx.PointElement{Id: AphA, Offset: 2, Type: typelabel.Float32, Units: "A", Mandatory: true, Label: "Amps PhaseA", Description: "Phase A Current"},
					smdx.PointElement{Id: AphB, Offset: 4, Type: typelabel.Float32, Units: "A", Mandatory: true, Label: "Amps PhaseB", Description: "Phase B Current"},
					smdx.PointElement{Id: AphC, Offset: 6, Type: typelabel.Float32, Units: "A", Mandatory: true, Label: "Amps PhaseC", Description: "Phase C Current"},
					smdx.PointElement{Id: PPVphAB, Offset: 8, Type: typelabel.Float32, Units: "V", Label: "Phase Voltage AB", Description: "Phase Voltage AB"},
					smdx.PointElement{Id: PPVphBC, Offset: 10, Type: typelabel.Float32, Units: "V", Label: "Phase Voltage BC", Description: "Phase Voltage BC"},
					smdx.PointElement{Id: PPVphCA, Offset: 12, Type: typelabel.Float32, Units: "V", Label: "Phase Voltage CA", Description: "Phase Voltage CA"},
					smdx.PointElement{Id: PhVphA, Offset: 14, Type: typelabel.Float32, Units: "V", Mandatory: true, Label: "Phase Voltage AN", Description: "Phase Voltage AN"},
					smdx.PointElement{Id: PhVphB, Offset: 16, Type: typelabel.Float32, Units: "V", Mandatory: true, Label: "Phase Voltage BN", Description: "Phase Voltage BN"},
					smdx.PointElement{Id: PhVphC, Offset: 18, Type: typelabel.Float32, Units: "V", Mandatory: true, Label: "Phase Voltage CN", Description: "Phase Voltage CN"},
					smdx.PointElement{Id: W, Offset: 20, Type: typelabel.Float32, Units: "W", Mandatory: true, Label: "Watts", Description: "AC Power"},
					smdx.PointElement{Id: Hz, Offset: 22, Type: typelabel.Float32, Units: "Hz", Mandatory: true, Label: "Hz", Description: "Line Frequency"},
					smdx.PointElement{Id: VA, Offset: 24, Type: typelabel.Float32, Units: "VA", Label: "VA", Description: "AC Apparent Power"},
					smdx.PointElement{Id: VAr, Offset: 26, Type: typelabel.Float32, Units: "var", Label: "VAr", Description: "AC Reactive Power"},
					smdx.PointElement{Id: PF, Offset: 28, Type: typelabel.Float32, Units: "Pct", Label: "PF", Description: "AC Power Factor"},
					smdx.PointElement{Id: WH, Offset: 30, Type: typelabel.Float32, Units: "Wh", Mandatory: true, Label: "WattHours", Description: "AC Energy"},
					smdx.PointElement{Id: DCA, Offset: 32, Type: typelabel.Float32, Units: "A", Label: "DC Amps", Description: "DC Current"},
					smdx.PointElement{Id: DCV, Offset: 34, Type: typelabel.Float32, Units: "V", Label: "DC Voltage", Description: "DC Voltage"},
					smdx.PointElement{Id: DCW, Offset: 36, Type: typelabel.Float32, Units: "W", Label: "DC Watts", Description: "DC Power"},
					smdx.PointElement{Id: TmpCab, Offset: 38, Type: typelabel.Float32, Units: "C", Mandatory: true, Label: "Cabinet Temperature", Description: "Cabinet Temperature"},
					smdx.PointElement{Id: TmpSnk, Offset: 40, Type: typelabel.Float32, Units: "C", Label: "Heat Sink Temperature", Description: "Heat Sink Temperature"},
					smdx.PointElement{Id: TmpTrns, Offset: 42, Type: typelabel.Float32, Units: "C", Label: "Transformer Temperature", Description: "Transformer Temperature"},
					smdx.PointElement{Id: TmpOt, Offset: 44, Type: typelabel.Float32, Units: "C", Label: "Other Temperature", Description: "Other Temperature"},
					smdx.PointElement{Id: St, Offset: 46, Type: typelabel.Enum16, Mandatory: true, Label: "Operating State", Description: "Enumerated value.  Operating state"},
					smdx.PointElement{Id: StVnd, Offset: 47, Type: typelabel.Enum16, Label: "Vendor Operating State", Description: "Vendor specific operating state code"},
					smdx.PointElement{Id: Evt1, Offset: 48, Type: typelabel.Bitfield32, Mandatory: true, Label: "Event1", Description: "Bitmask value. Event fields"},
					smdx.PointElement{Id: Evt2, Offset: 50, Type: typelabel.Bitfield32, Mandatory: true, Label: "Event Bitfield 2", Description: "Reserved for future use"},
					smdx.PointElement{Id: EvtVnd1, Offset: 52, Type: typelabel.Bitfield32, Label: "Vendor Event Bitfield 1", Description: "Vendor defined events"},
					smdx.PointElement{Id: EvtVnd2, Offset: 54, Type: typelabel.Bitfield32, Label: "Vendor Event Bitfield 2", Description: "Vendor defined events"},
					smdx.PointElement{Id: EvtVnd3, Offset: 56, Type: typelabel.Bitfield32, Label: "Vendor Event Bitfield 3", Description: "Vendor defined events"},
					smdx.PointElement{Id: EvtVnd4, Offset: 58, Type: typelabel.Bitfield32, Label: "Vendor Event Bitfield 4", Description: "Vendor defined events"},
				},
			},
		}})
}
