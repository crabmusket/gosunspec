// NOTICE
// This file was automatically generated by ../../generators/models.go. Do not edit it!
// You can regenerate it by running 'go generate ./models' from the directory above.

package model7

import (
	"github.com/crabmusket/gosunspec"
	"github.com/crabmusket/gosunspec/smdx"
	"github.com/crabmusket/gosunspec/typelabel"
)

// Block7 - Secure Write Response Model (DRAFT 1) - Include a digital signature over the response

const (
	ModelID = 7
)

const (
	Alg   = "Alg"
	Alm   = "Alm"
	DS    = "DS"
	Ms    = "Ms"
	N     = "N"
	RqSeq = "RqSeq"
	Rsrvd = "Rsrvd"
	Seq   = "Seq"
	Sts   = "Sts"
	Ts    = "Ts"
)

type Block7Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block7 struct {
	RqSeq uint16         `sunspec:"offset=0,access=r"`
	Sts   sunspec.Enum16 `sunspec:"offset=1,access=r"`
	Ts    uint32         `sunspec:"offset=2,access=r"`
	Ms    uint16         `sunspec:"offset=4,access=r"`
	Seq   uint16         `sunspec:"offset=5,access=r"`
	Alm   sunspec.Enum16 `sunspec:"offset=6"`
	Rsrvd sunspec.Pad    `sunspec:"offset=7,access=r"`
	Alg   sunspec.Enum16 `sunspec:"offset=8,access=r"`
	N     uint16         `sunspec:"offset=9,access=rw"`

	Repeats []Block7Repeat
}

func (self *Block7) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "",
		Length: 11,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: RqSeq, Offset: 0, Type: typelabel.Uint16, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Sts, Offset: 1, Type: typelabel.Enum16, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Ts, Offset: 2, Type: typelabel.Uint32, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Ms, Offset: 4, Type: typelabel.Uint16, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Seq, Offset: 5, Type: typelabel.Uint16, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Alm, Offset: 6, Type: typelabel.Enum16, Mandatory: true},
					smdx.PointElement{Id: Rsrvd, Offset: 7, Type: typelabel.Pad, Access: "r", Mandatory: true},
					smdx.PointElement{Id: Alg, Offset: 8, Type: typelabel.Enum16, Access: "r", Mandatory: true},
					smdx.PointElement{Id: N, Offset: 9, Type: typelabel.Uint16, Access: "rw", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: DS, Offset: 0, Type: typelabel.Uint16, Access: "rw", Mandatory: true},
				},
			},
		}})
}
